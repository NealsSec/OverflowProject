======================================================
     PLANNING
======================================================
Next I want to convert the main string builder functions
to use a char * for the character values just for
standardization.

I need to change the help page and add a help option
to the argument list

For alphabet functions it may be a good idea to
rollover the character after several iterations

Consider changing several of the functions to accept
pointers
*/

======================================================
Trenton 4/28/2019

Changes I've made was mostly housekeeping. I wanted to
clean up "main.c".

So we can only keep core logic of the program in there
and the functions that does the 'background magic' is
in the other file and we only use themin main instead
of defining them there.

I also moved all the optflag code to the other file to
because it was confusing reading main with that
intimidating optflag code at the beggining. Email me if
you want me to provide an explaination on how the
"setFlags()" function was able to work. I barely
changed any code and just supplied the pointers to have
the opt flag code change it by 'reference'

I also noticed this piece of code in here when I glanced
over it :

letter[0] = ((char)*optarg); // I legitimately have no idea why this works but ok.
printf("%s\n", letter); // This will need validation, this is also debugging info

This could've lead to an exploit maybe idk.

char * and char [] are the same thing. Thats why argv in
main can be defined as char **argv or char *argv[].

strings are considered character arrays.
char * ptr_str  = "hello";
char arr_str[6] = 'h', 'e', 'l', 'l', 'o', '\0';

if you were to print:
	printf("%p\n", &arr_str[0]);
	printf("%p\n", &arr_str);
it would be the same memory address.

so when you did
letter[0] = ((char)*optarg);

you assigned new string pointer to letter. And now letter
references char * optarg instead of loading into the memory
of where letter was at. This doesn't get seg fault since
optarg is refrencing a 'string literal' from argv where
the memory was allocated at run time for it.

The crazy part is your code still worked and only prints
"A\0" and stacks it up in consle to appear as one long
string. But in reality its actually multiple null
terminated strings stacking after each other.
This isn't really an issue since your just copying from
console so you don't get the nullbytes but if you were
to say build up the string in a function and return it
to another function there would be some 'issues' for
example if you were to printf("%s","A\0A\0A\0A\0"); it
would only print one A since strings a terminated w/
null bytes. Your function was saved by the fact you
transfered it using char [2] datatypes which added the
null byte for you so when passing
overflow -c 1 -letter "BB"
it still prints only 1 B

tldr;
moved code to seperate file for cleanliness
created setFlags() to get optflag code in other file
edited code in the opt flag while loop

case 'l':
	letter[0] = ((char)*optarg);
	printf("%s\n", letter);

with

  case 'l':
	strncpy(letter, optarg, 1);
	break;

======================================================
